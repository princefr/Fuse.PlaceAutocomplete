//#if #(LIBRARY:Defined)
//apply plugin: 'com.android.library'
//#else
apply plugin: 'com.android.application'
//#endif

dependencies {
    compile fileTree(dir: 'src/main/libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
//#if #(Gradle.Dependency.Compile:IsRequired)
    compile 'com.drewnoakes:metadata-extractor:2.10.1'
//#endif
//#if #(Gradle.Dependency:IsRequired)
    compile('com.google.android.gms:play-services-places:11.0.4')
//#endif
}


task copySharedLibraries {
    copy {
        from '/Users/princejackes/Library/Android/sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/libgnustl_shared.so'
        into file('src/main/jniLibs/armeabi-v7a')
    }
    copy {
        from '/usr/local/share/uno/Packages/Fuse.Scripting.JavaScript/1.4.2/V8/lib/Android/libV8Simple.so'
        into file('src/main/jniLibs/armeabi-v7a')
    }
}

build.dependsOn copySharedLibraries

//#if #(Gradle.Repository:IsRequired)
//repositories {
//    #(Gradle.Repository:Join('\n'))
//}
//#endif


repositories {
//#if #(JNI.SystemLibrary:IsSet || JNI.SharedLibrary:IsSet)
//    libs(PrebuiltLibraries) {
//        prebuilt {
//            binaries.withType(SharedLibraryBinary) {
//                #(JNI.SystemLibrary:Join('\n                    ', 'sharedLibraryFile = file(\'', '\')'))
//                #(JNI.SharedLibrary:Join('\n                    ', 'sharedLibraryFile = file(\'', '\')'))
//            }
//        }
//    }
//#endif
//#if #(Gradle.Model.Repository:IsRequired)
//    #(Gradle.Model.Repository:Join('\n'))
//#endif
}

android.lintOptions {
    checkReleaseBuilds = false
}

android {
    compileSdkVersion = 23
    buildToolsVersion = "23.0.1"

    defaultConfig {
//#if !#(LIBRARY:Defined)
        applicationId = "com.apps.fuse.placeautocomplete"
//#endif
        minSdkVersion = 16
        targetSdkVersion = 23
        versionCode = 0
        versionName = "0.0.0"
        ndk {
            abiFilters = []
            abiFilters.add("armeabi-v7a")
        }

        externalNativeBuild {
            cmake {
                // The build configuration of the native binary might differ from the build
                // configuration of the APK. For performance reasons, we don't want to use the
                // Fuse Simulator on the significantly slower debug binaries, so building debug by
                // default means we are giving users a bad experience by default. Native debug
                // binaries are only really useful when actually debugging generated C++ code.
                // Running 'uno build android --debug' will produce debuggable C++ code.
                arguments "-DCMAKE_BUILD_TYPE=Release",
                    "-DANDROID_STL=gnustl_shared",
                    "-DANDROID_PLATFORM=android-9",
                    "-DANDROID_TOOLCHAIN=clang",
                    "-DANDROID_NDK=/Users/princejackes/Library/Android/sdk/ndk-bundle"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/CMakeLists.txt"
        }
    }

//#if #(Project.Android.Key.Store:IsSet)
//    signingConfigs {
//        release {
//            keyAlias "#(Project.Android.Key.Alias)"
//            keyPassword "#(Project.Android.Key.AliasPassword)"
//            storeFile file("#(Project.Android.Key.Store:Path)")
//            storePassword "#(Project.Android.Key.StorePassword)"
//        }
//    }
//#endif

    buildTypes {
        release {
//#if #(DEBUG:Defined)
            debuggable = true
//#elif #(Project.Android.Key.Store:IsSet)
//            signingConfig = signingConfigs.release
//#endif
            minifyEnabled = false
            proguardFiles 'proguard-rules.pro'
        }
    }

    aaptOptions {
        cruncherEnabled = false
    }
}


